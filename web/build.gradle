import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'com.palantir.git-version' version '0.12.3'
}

repositories {
    jcenter()
}

dependencies {
	implementation group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.11.918'
	implementation group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
	implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
	implementation group: 'org.jsoup', name: 'jsoup', version: '1.14.2'
}

compileJava { // AWS Lamdba currently June-2019 only supports Java 8
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

sourceSets {
	main {
		java {
			//exclude 'web/pages/root/sandpit/*'
		}
		resources {
			//srcDirs = ["src/main/java"]
			//includes = ["**/*.*"]
			//exclude 'web/js/snake.js'
		}
	}
}

def version = project.projectDir.toString() + "/src/main/java/web/Version.java"
def versionBackup = version + ".bak"
def formattedDate = new Date().format('yyyy-MM-dd-HH-mm-ss')

compileJava.doFirst {
	new File(versionBackup).bytes = new File(version).bytes
	project.logger.lifecycle("Create dynamic version class: " + version)

	def ln = System.getProperty('line.separator')
	File file = new File(version)
	file.write ""
	def foundVersionString = false;
	new File(versionBackup).eachLine { line ->
		if (line.contains("UNDEFINED")) {
			 file << line.replace("UNDEFINED", formattedDate + " | " + gitVersion()) << ln
			 foundVersionString = true;
		} else {
			file << line << ln
		}
	}
	if (!foundVersionString) {
		new File(version).bytes = new File(versionBackup).bytes
		delete(versionBackup)
		throw new GradleException("Failed to find Version String UNDEFINED in : " + version)
	}
}

compileJava.doLast {
    new File(version).bytes = new File(versionBackup).bytes
    delete(versionBackup)
}

shadowJar {
	def jarName = "web-" + formattedDate

	//minimize()
	archiveBaseName = jarName
	classifier = null
	archiveVersion = null
   	
   	doLast { // Move jar file to root of build dir
        copy {
            from "build/libs/${jarName}.jar"
            into "build/"
        }
        delete("build/libs/${jarName}.jar")
    }
}

jar {
	manifest {
		attributes 'Main-Class': 'web.Main'
	}
}
